@using System.Net
@using FluentValidation
@using NorthwindBlazor.Client.Services
@using NorthwindBlazor.Shared.Customer

@page "/customer/{CustomerId}"
@inject ICustomerService CustomerService
@inject Microsoft.AspNetCore.Blazor.Services.IUriHelper UriHelper

<h1>Edit Customers</h1>


@if (customer == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <form novalidate>
        <div class="form-row">
            <div class="form-group col-md-6">
                <label for="companyName">Company Name</label>
                <input type="text" class="form-control" id="companyName" placeholder="Company Name" bind="@customer.CompanyName" />
                <ErrorFor Property="CompanyName" ValidationException="@customerValidationException" />
            </div>
            <div class="form-group col-md-6">
                <label for="contactName">Contact Name</label>
                <input type="text" class="form-control" id="contactName" placeholder="Contact Name"  bind="@customer.ContactName" />
            </div>
        </div>
        <div class="form-row">
            <div class="form-group col-md-6">
                <label for="address">Address</label>
                <textarea type="text" class="form-control" id="address" placeholder="Address"  bind="@customer.Address"></textarea>
            </div>
            <div class="form-group col-md-6">
                <label for="contactName">City</label>
                <input type="text" class="form-control" id="city" placeholder="City" bind="@customer.City" />
            </div>
        </div>
        <div class="form-row">
            <div class="form-group">
                <button type="button" class="btn btn-primary" onclick="@Save">Save</button>
                <button type="button" class="btn btn-danger" onclick="@Cancel">Cancel</button>
            </div>
        </div>    
    </form>
    
}

@functions {
    
    [Parameter]
    string CustomerId { get; set; }
    
    CustomerModel customer = null;
    ValidationException customerValidationException = null;

    protected override async Task OnInitAsync()
    {
        if (CustomerId == "NEW")
        {
            customer = new CustomerModel();
        }
        else
        {
            customer = await CustomerService.GetCustomer(CustomerId);
        }
    }

    private async Task Save()
    {
        try
        {
            customer = await CustomerService.SaveCustomer(customer);
            UriHelper.NavigateTo("/customers");
        }
        catch (ValidationException ve)
        {
            customerValidationException = ve;
        }
    }

    private void Cancel()
    {
        UriHelper.NavigateTo("/customers");
    }

}
